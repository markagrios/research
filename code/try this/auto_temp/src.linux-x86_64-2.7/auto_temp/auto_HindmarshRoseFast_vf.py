# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_auto_HindmarshRoseFast_vf', [dirname(__file__)])
        except ImportError:
            import _auto_HindmarshRoseFast_vf
            return _auto_HindmarshRoseFast_vf
        if fp is not None:
            try:
                _mod = imp.load_module('_auto_HindmarshRoseFast_vf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _auto_HindmarshRoseFast_vf = swig_import_helper()
    del swig_import_helper
else:
    import _auto_HindmarshRoseFast_vf
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def Initialize():
    return _auto_HindmarshRoseFast_vf.Initialize()
Initialize = _auto_HindmarshRoseFast_vf.Initialize

def SetData(ips, ilp, isw, isp, sjac, sflow, nsm, nmx, ndim, ntst, ncol, iad, epsl, epsu, epss, itmx, itnw, ds, dsmin, dsmax, npr, iid, nicp, icp, nuzr, iuz, vuz):
    return _auto_HindmarshRoseFast_vf.SetData(ips, ilp, isw, isp, sjac, sflow, nsm, nmx, ndim, ntst, ncol, iad, epsl, epsu, epss, itmx, itnw, ds, dsmin, dsmax, npr, iid, nicp, icp, nuzr, iuz, vuz)
SetData = _auto_HindmarshRoseFast_vf.SetData

def SetInitPoint(u, npar, ipar, par, icp, nups, ups, udotps, rldot, adaptcycle):
    return _auto_HindmarshRoseFast_vf.SetInitPoint(u, npar, ipar, par, icp, nups, ups, udotps, rldot, adaptcycle)
SetInitPoint = _auto_HindmarshRoseFast_vf.SetInitPoint

def Compute():
    return _auto_HindmarshRoseFast_vf.Compute()
Compute = _auto_HindmarshRoseFast_vf.Compute

def ClearAll():
    return _auto_HindmarshRoseFast_vf.ClearAll()
ClearAll = _auto_HindmarshRoseFast_vf.ClearAll

def getSolutionNum():
    return _auto_HindmarshRoseFast_vf.getSolutionNum()
getSolutionNum = _auto_HindmarshRoseFast_vf.getSolutionNum

def getSolutionVar(A):
    return _auto_HindmarshRoseFast_vf.getSolutionVar(A)
getSolutionVar = _auto_HindmarshRoseFast_vf.getSolutionVar

def getSolutionPar(A):
    return _auto_HindmarshRoseFast_vf.getSolutionPar(A)
getSolutionPar = _auto_HindmarshRoseFast_vf.getSolutionPar

def getFloquetMultipliers(A):
    return _auto_HindmarshRoseFast_vf.getFloquetMultipliers(A)
getFloquetMultipliers = _auto_HindmarshRoseFast_vf.getFloquetMultipliers

def getJacobians(A):
    return _auto_HindmarshRoseFast_vf.getJacobians(A)
getJacobians = _auto_HindmarshRoseFast_vf.getJacobians

def getNumIters(A):
    return _auto_HindmarshRoseFast_vf.getNumIters(A)
getNumIters = _auto_HindmarshRoseFast_vf.getNumIters

def getSpecPtNum():
    return _auto_HindmarshRoseFast_vf.getSpecPtNum()
getSpecPtNum = _auto_HindmarshRoseFast_vf.getSpecPtNum

def getSpecPtDims(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPtDims(i, A)
getSpecPtDims = _auto_HindmarshRoseFast_vf.getSpecPtDims

def getSpecPtFlags(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPtFlags(i, A)
getSpecPtFlags = _auto_HindmarshRoseFast_vf.getSpecPtFlags

def getSpecPt_ups(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPt_ups(i, A)
getSpecPt_ups = _auto_HindmarshRoseFast_vf.getSpecPt_ups

def getSpecPt_udotps(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPt_udotps(i, A)
getSpecPt_udotps = _auto_HindmarshRoseFast_vf.getSpecPt_udotps

def getSpecPt_rldot(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPt_rldot(i, A)
getSpecPt_rldot = _auto_HindmarshRoseFast_vf.getSpecPt_rldot

def getSpecPt_flow1(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPt_flow1(i, A)
getSpecPt_flow1 = _auto_HindmarshRoseFast_vf.getSpecPt_flow1

def getSpecPt_flow2(i, A):
    return _auto_HindmarshRoseFast_vf.getSpecPt_flow2(i, A)
getSpecPt_flow2 = _auto_HindmarshRoseFast_vf.getSpecPt_flow2
# This file is compatible with both classic and new-style classes.


